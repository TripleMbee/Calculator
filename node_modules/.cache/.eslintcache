[{"D:\\kodingan\\kalkulator\\src\\index.js":"1","D:\\kodingan\\kalkulator\\src\\App.js":"2","D:\\kodingan\\kalkulator\\src\\components\\Calculator.js":"3","D:\\kodingan\\kalkulator\\src\\components\\History.js":"4","D:\\kodingan\\kalkulator\\src\\components\\Stars.js":"5"},{"size":292,"mtime":1750274090939,"results":"6","hashOfConfig":"7"},{"size":3447,"mtime":1750298832254,"results":"8","hashOfConfig":"7"},{"size":9700,"mtime":1750298830944,"results":"9","hashOfConfig":"7"},{"size":3590,"mtime":1750298837015,"results":"10","hashOfConfig":"7"},{"size":2843,"mtime":1750256784920,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1vw9ycl",{"filePath":"15","messages":"16","suppressedMessages":"17","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","suppressedMessages":"26","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\kodingan\\kalkulator\\src\\index.js",[],[],"D:\\kodingan\\kalkulator\\src\\App.js",[],[],"D:\\kodingan\\kalkulator\\src\\components\\Calculator.js",["27","28","29","30","31"],[],"D:\\kodingan\\kalkulator\\src\\components\\History.js",[],[],"D:\\kodingan\\kalkulator\\src\\components\\Stars.js",[],[],{"ruleId":"32","severity":1,"message":"33","line":14,"column":9,"nodeType":"34","endLine":19,"endColumn":4,"suggestions":"35"},{"ruleId":"32","severity":1,"message":"36","line":26,"column":9,"nodeType":"34","endLine":33,"endColumn":4,"suggestions":"37"},{"ruleId":"32","severity":1,"message":"38","line":35,"column":9,"nodeType":"34","endLine":45,"endColumn":4,"suggestions":"39"},{"ruleId":"32","severity":1,"message":"40","line":47,"column":9,"nodeType":"34","endLine":62,"endColumn":4,"suggestions":"41"},{"ruleId":"32","severity":1,"message":"42","line":81,"column":9,"nodeType":"34","endLine":94,"endColumn":4,"suggestions":"43"},"react-hooks/exhaustive-deps","The 'clearAll' function makes the dependencies of useEffect Hook (at line 191) change on every render. To fix this, wrap the definition of 'clearAll' in its own useCallback() Hook.","VariableDeclarator",["44"],"The 'inputDigit' function makes the dependencies of useEffect Hook (at line 191) change on every render. To fix this, wrap the definition of 'inputDigit' in its own useCallback() Hook.",["45"],"The 'inputDecimal' function makes the dependencies of useEffect Hook (at line 191) change on every render. To fix this, wrap the definition of 'inputDecimal' in its own useCallback() Hook.",["46"],"The 'performOperation' function makes the dependencies of useEffect Hook (at line 191) change on every render. To fix this, wrap the definition of 'performOperation' in its own useCallback() Hook.",["47"],"The 'performCalculation' function makes the dependencies of useEffect Hook (at line 191) change on every render. To fix this, wrap the definition of 'performCalculation' in its own useCallback() Hook.",["48"],{"desc":"49","fix":"50"},{"desc":"51","fix":"52"},{"desc":"53","fix":"54"},{"desc":"55","fix":"56"},{"desc":"57","fix":"58"},"Wrap the definition of 'clearAll' in its own useCallback() Hook.",{"range":"59","text":"60"},"Wrap the definition of 'inputDigit' in its own useCallback() Hook.",{"range":"61","text":"62"},"Wrap the definition of 'inputDecimal' in its own useCallback() Hook.",{"range":"63","text":"64"},"Wrap the definition of 'performOperation' in its own useCallback() Hook.",{"range":"65","text":"66"},"Wrap the definition of 'performCalculation' in its own useCallback() Hook.",{"range":"67","text":"68"},[529,651],"useCallback(() => {\r\n    setDisplay('0');\r\n    setPreviousValue(null);\r\n    setOperation(null);\r\n    setWaitingForOperand(false);\r\n  })",[773,981],"useCallback((digit) => {\r\n    if (waitingForOperand) {\r\n      setDisplay(String(digit));\r\n      setWaitingForOperand(false);\r\n    } else {\r\n      setDisplay(display === '0' ? String(digit) : display + digit);\r\n    }\r\n  })",[1009,1212],"useCallback(() => {\r\n    if (waitingForOperand) {\r\n      setDisplay('0.');\r\n      setWaitingForOperand(false);\r\n      return;\r\n    }\r\n\r\n    if (!display.includes('.')) {\r\n      setDisplay(display + '.');\r\n    }\r\n  })",[1244,1687],"useCallback((nextOperation) => {\r\n    const inputValue = parseFloat(display);\r\n\r\n    if (previousValue === null) {\r\n      setPreviousValue(inputValue);\r\n    } else if (operation) {\r\n      const currentValue = previousValue || 0;\r\n      const newValue = calculate(currentValue, inputValue, operation);\r\n\r\n      setDisplay(String(newValue));\r\n      setPreviousValue(newValue);\r\n    }\r\n\r\n    setWaitingForOperand(true);\r\n    setOperation(nextOperation);\r\n  })",[2165,2591],"useCallback(() => {\r\n    if (!previousValue || !operation) return;\r\n\r\n    const inputValue = parseFloat(display);\r\n    const result = calculate(previousValue, inputValue, operation);\r\n    \r\n    const calculationString = `${previousValue} ${operation} ${inputValue}`;\r\n    onCalculate(calculationString, result);\r\n\r\n    setDisplay(String(result));\r\n    setPreviousValue(null);\r\n    setOperation(null);\r\n    setWaitingForOperand(true);\r\n  })"]